
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    // AMAN: Mengambil data dokumen pengguna jika ada.
    function getUserDocument(uid) {
      return getAfter(/databases/$(database)/documents/users/$(uid));
    }

    // AMAN: Memeriksa apakah dokumen pengguna ada.
    function userDocumentExists(uid) {
      return exists(/databases/$(database)/documents/users/$(uid));
    }

    // AMAN: Mengambil data dari dokumen pengguna yang sudah dipastikan ada.
    // Pemanggil HARUS memastikan userDocumentExists(uid) adalah true.
    function getUserDocumentDataUnsafe(uid) {
      return getUserDocument(uid).data;
    }

    // --- Pemeriksaan Peran & Merchant (Requester) ---
    // Memeriksa apakah pengguna yang saat ini login adalah SUPERADMIN.
    function isRequesterSuperadmin() {
      return isSignedIn() &&
             userDocumentExists(request.auth.uid) &&
             getUserDocumentDataUnsafe(request.auth.uid).role == 'superadmin';
    }

    // Memeriksa apakah pengguna yang saat ini login adalah ADMIN.
    function isRequesterAdmin() {
      return isSignedIn() &&
             userDocumentExists(request.auth.uid) &&
             getUserDocumentDataUnsafe(request.auth.uid).role == 'admin';
    }

    // Memeriksa apakah pengguna yang saat ini login adalah KASIR.
    function isRequesterKasir() {
      return isSignedIn() &&
             userDocumentExists(request.auth.uid) &&
             getUserDocumentDataUnsafe(request.auth.uid).role == 'kasir';
    }

    // Mengambil merchantId dari pengguna yang login (pemohon), jika dia admin atau kasir.
    // Pemanggil HARUS memastikan pemohon adalah admin atau kasir.
    function getRequesterMerchantIdUnsafe() {
      return getUserDocumentDataUnsafe(request.auth.uid).merchantId;
    }
    
    // Memeriksa apakah pengguna yang login (admin atau kasir) memiliki merchantId.
    function requesterHasMerchantId() {
        return isSignedIn() &&
               userDocumentExists(request.auth.uid) &&
               getUserDocumentDataUnsafe(request.auth.uid).merchantId != null;
    }

    // --- Aturan Global untuk Superadmin ---
    // Superadmin memiliki akses penuh ke semua dokumen.
    match /{document=**} {
      allow read, write: if isRequesterSuperadmin();
    }

    // --- Aturan Spesifik per Koleksi ---
    match /users/{targetUserId} {
      // Data dokumen pengguna yang ditargetkan (resource saat read/update/delete, request.resource saat create)
      let targetUserData = resource != null ? resource.data : request.resource.data;

      // Apakah pemohon adalah pemilik dokumen yang ditargetkan?
      function isOwner() {
        return isSignedIn() && request.auth.uid == targetUserId;
      }

      // Apakah pemohon adalah admin dari merchant tempat pengguna target berafiliasi?
      function isRequesterAdminOfTargetUserMerchant() {
        return isRequesterAdmin() &&
               requesterHasMerchantId() &&
               targetUserData.merchantId == getRequesterMerchantIdUnsafe();
      }
      
      // Kondisi spesifik: Admin (pemohon) membuat dokumen KASIR baru.
      function isAdminCreatingKasirDocument() {
        return isRequesterAdmin() && // Pemohon adalah admin
               request.resource.data.role == 'kasir'; // Dokumen baru adalah untuk kasir
      }

      // Kondisi spesifik: Pengguna mendaftarkan dirinya sebagai admin baru (pending approval).
      function isSelfRegisteringAdmin() {
        return isSignedIn() &&
               request.auth.uid == targetUserId && // Membuat dokumen untuk diri sendiri
               request.resource.data.role == 'admin' &&
               request.resource.data.status == 'pending_approval' &&
               request.resource.data.merchantId == request.auth.uid; // MerchantId diisi dengan UID sendiri saat pendaftaran
      }

      allow read: if isOwner() || isRequesterAdminOfTargetUserMerchant() || isRequesterSuperadmin();

      allow create: if isAdminCreatingKasirDocument() || // Admin membuat kasir
                       isSelfRegisteringAdmin() ||       // Pengguna mendaftar sebagai admin baru
                       isRequesterSuperadmin();          // Superadmin selalu bisa

      allow update: if (isOwner() && 
                          (request.resource.data.keys().hasOnly(['name', 'email', 'outlets', 'password', 'status', 'role', 'merchantId', 'createdAt', 'updatedAt']) ||
                           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name','outlets','password']))) || // Pemilik bisa update field tertentu
                       isRequesterAdminOfTargetUserMerchant() || // Admin merchant bisa update
                       isRequesterSuperadmin(); // Superadmin selalu bisa

      allow delete: if (isRequesterAdminOfTargetUserMerchant() && targetUserData.role == 'kasir') || // Admin merchant bisa hapus kasir
                       (isRequesterSuperadmin() && targetUserData.role != 'superadmin' && targetUserId != request.auth.uid); // Superadmin bisa hapus siapa saja kecuali dirinya atau superadmin lain
    }

    match /outlets/{outletId} {
      let outletData = resource != null ? resource.data : request.resource.data;

      function isOutletOfRequesterMerchant() {
        return isRequesterAdmin() &&
               requesterHasMerchantId() &&
               outletData.merchantId == getRequesterMerchantIdUnsafe();
      }

      allow read: if isOutletOfRequesterMerchant() || isRequesterSuperadmin();
      allow create: if isRequesterAdmin() && 
                       requesterHasMerchantId() && 
                       request.resource.data.merchantId == getRequesterMerchantIdUnsafe() || // Admin membuat outlet untuk merchantnya
                       isRequesterSuperadmin();
      allow update, delete: if isOutletOfRequesterMerchant() || isRequesterSuperadmin();
    }

    match /products/{productId} {
      let productData = resource != null ? resource.data : request.resource.data;

      function isProductOfRequesterMerchant() {
        // Bisa diakses oleh admin atau kasir dari merchant yang sama
        return (isRequesterAdmin() || isRequesterKasir()) &&
               requesterHasMerchantId() &&
               productData.merchantId == getRequesterMerchantIdUnsafe();
      }
      
      function isKasirUpdatingStock() {
        return isRequesterKasir() &&
               requesterHasMerchantId() &&
               productData.merchantId == getRequesterMerchantIdUnsafe() &&
               request.resource.data.diff(resource.data).affectedKeys().hasOnly(['units', 'updatedAt']); // Hanya field units dan updatedAt yang boleh diubah kasir
      }

      allow read: if isProductOfRequesterMerchant() || isRequesterSuperadmin();
      allow create: if isRequesterAdmin() && 
                       requesterHasMerchantId() &&
                       request.resource.data.merchantId == getRequesterMerchantIdUnsafe() || // Admin membuat produk untuk merchantnya
                       isRequesterSuperadmin();
      allow update: if (isRequesterAdmin() && isProductOfRequesterMerchant()) || // Admin bisa update semua field produk merchantnya
                       isKasirUpdatingStock() || // Kasir hanya bisa update stok
                       isRequesterSuperadmin();
      allow delete: if (isRequesterAdmin() && isProductOfRequesterMerchant()) || isRequesterSuperadmin();
    }

    match /suppliers/{supplierId} {
      let supplierData = resource != null ? resource.data : request.resource.data;

      function isSupplierOfRequesterMerchant() {
        return isRequesterAdmin() &&
               requesterHasMerchantId() &&
               supplierData.merchantId == getRequesterMerchantIdUnsafe();
      }

      allow read: if isSupplierOfRequesterMerchant() || isRequesterSuperadmin();
      allow create: if isRequesterAdmin() && 
                       requesterHasMerchantId() &&
                       request.resource.data.merchantId == getRequesterMerchantIdUnsafe() || // Admin membuat supplier untuk merchantnya
                       isRequesterSuperadmin();
      allow update, delete: if isSupplierOfRequesterMerchant() || isRequesterSuperadmin();
    }

     match /settings/{settingsMerchantId} {
      function isSettingsForRequesterMerchant() {
        return isRequesterAdmin() &&
               requesterHasMerchantId() &&
               getRequesterMerchantIdUnsafe() == settingsMerchantId;
      }
      allow read, write: if isSettingsForRequesterMerchant() || isRequesterSuperadmin();
    }

    match /transactions/{transactionId} {
      let transactionData = resource != null ? resource.data : request.resource.data;

      function isTransactionOfRequesterMerchant() {
        return (isRequesterAdmin() || isRequesterKasir()) &&
               requesterHasMerchantId() &&
               transactionData.merchantId == getRequesterMerchantIdUnsafe();
      }
      
      // Memeriksa apakah kasir yang membuat transaksi memiliki akses ke outlet transaksi tersebut.
      function isKasirAssignedToTransactionOutlet() {
        return isRequesterKasir() &&
               userDocumentExists(request.auth.uid) && // Pastikan dokumen kasir ada
               getUserDocumentDataUnsafe(request.auth.uid).outlets != null &&
               request.resource.data.outletId in getUserDocumentDataUnsafe(request.auth.uid).outlets;
      }

      allow create: if (isRequesterSuperadmin()) ||
                       (isRequesterAdmin() && isTransactionOfRequesterMerchant()) || // Admin bisa buat transaksi untuk merchantnya
                       (isRequesterKasir() && isTransactionOfRequesterMerchant() && isKasirAssignedToTransactionOutlet()); // Kasir bisa buat transaksi untuk merchantnya & outlet yg diassign
                       
      allow read: if isTransactionOfRequesterMerchant() || isRequesterSuperadmin();
    }
  }
}

    