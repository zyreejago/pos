
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function userDocumentExists(uid) {
      return exists(/databases/$(database)/documents/users/$(uid));
    }

    function getRequesterAuthUID() {
      return request.auth.uid;
    }

    // Gets data for any user. Caller must ensure document exists if accessing fields.
    function getUserDocumentDataUnsafe(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data;
    }

    // Gets data for the currently authenticated user. Returns null if not found.
    function getRequesterDocumentData() {
      let authUID = getRequesterAuthUID();
      if (authUID != null && userDocumentExists(authUID)) {
        return getUserDocumentDataUnsafe(authUID);
      }
      return null;
    }

    function isRequesterRole(roleName) {
      let requesterData = getRequesterDocumentData();
      return requesterData != null && requesterData.role == roleName;
    }

    function isRequesterAdmin() {
      return isRequesterRole('admin');
    }

    function isRequesterSuperadmin() {
      return isRequesterRole('superadmin');
    }

    // --- Self Registration for Merchant Admin ---
    function isSelfRegisteringAsPendingMerchantAdmin() {
      let authUID = getRequesterAuthUID();
      return authUID != null &&
             authUID == request.resource.id && // Document ID must match auth UID
             request.resource.data.role == 'admin' &&
             request.resource.data.status == 'pending_approval' &&
             request.resource.data.merchantId == authUID; // Merchant ID is self UID
    }

    // --- Global Superadmin Rule (Highest Priority for Allow) ---
    match /{document=**} {
      allow read, write: if isRequesterSuperadmin();
    }

    // --- Koleksi /users ---
    match /users/{userId} {

      // Admin bisa membaca data kasir atau admin lain dalam merchantnya.
      // Pengguna bisa membaca data dirinya sendiri.
      function canReadUserData() {
        if (request.auth.uid == userId) { // Owner
          return true;
        }
        // If requester is admin, they can read users of their own merchant
        let requesterData = getRequesterDocumentData();
        let targetUserData = resource.data; // Data user yang diakses (existing document)
        return requesterData != null && requesterData.role == 'admin' &&
               targetUserData != null && targetUserData.merchantId == requesterData.merchantId;
      }

      // Kasus untuk membuat kasir oleh admin (SANGAT DISEREDERHANAKAN)
      function isAdminCreatingKasir() {
        // 1. Pemohon adalah admin.
        // 2. Dokumen baru yang dibuat adalah 'kasir'.
        // 3. Dokumen baru WAJIB memiliki field 'merchantId' (dikirim oleh klien).
        //    Nilai merchantId ini akan diisi oleh klien dengan merchantId milik admin.
        return isRequesterAdmin() &&
               request.resource.data.role == 'kasir' &&
               request.resource.data.merchantId != null;
      }

      allow read: if canReadUserData();

      allow create: if isAdminCreatingKasir() ||
                       isSelfRegisteringAsPendingMerchantAdmin();

      // Pengguna bisa update data dirinya sendiri.
      // Admin bisa update data kasir atau admin lain dalam merchantnya.
      function canUpdateUserData() {
        if (request.auth.uid == userId) { // Owner can update self (with restrictions)
            // User tidak bisa mengubah role atau merchantId sendiri di sini
            if (request.resource.data.role != resource.data.role ||
                request.resource.data.merchantId != resource.data.merchantId) {
                return false;
            }
            return true;
        }
        // Admin can update users of their own merchant
        let requesterData = getRequesterDocumentData();
        let targetUserData = resource.data; // Existing data
        let incomingData = request.resource.data; // New data

        let isRoleChanging = incomingData.role != targetUserData.role;
        let isMerchantIdChanging = incomingData.merchantId != targetUserData.merchantId;

        if (requesterData != null && requesterData.role == 'admin' &&
            targetUserData != null && targetUserData.merchantId == requesterData.merchantId) {
              if (incomingData.role == 'superadmin') { return false; } // Admin cannot make anyone superadmin
              if (isMerchantIdChanging) { return false; } // Admin cannot change merchantId of users
              // Admin can change role from kasir to admin, or admin to kasir (within their merchant)
              // but not to/from superadmin.
              if (isRoleChanging && (targetUserData.role == 'superadmin' || incomingData.role == 'superadmin')) {
                return false;
              }
              return true; // Admin can update other fields / valid role changes
        }
        return false;
      }
      allow update: if canUpdateUserData();


      // Admin bisa delete kasir dalam merchantnya.
      function canDeleteUserData() {
        let requesterData = getRequesterDocumentData();
        let targetUserData = resource.data;
        if (requesterData != null && requesterData.role == 'admin' &&
            targetUserData != null && targetUserData.role == 'kasir' && // Hanya bisa delete kasir
            targetUserData.merchantId == requesterData.merchantId) {
          return true;
        }
        return false;
      }
      allow delete: if canDeleteUserData();
    }

    // --- Helper untuk aturan koleksi lain ---
    function getRequesterMerchantIdUnsafe() {
      // Caller MUST ensure getRequesterDocumentData() is not null and has merchantId
      return getRequesterDocumentData().merchantId;
    }

    // --- Aturan untuk koleksi lain (outlets, products, suppliers, settings, transactions) ---
    // Semua ini bergantung pada requester adalah 'admin' dan memiliki 'merchantId' yang cocok.

    match /outlets/{outletId} {
      function isOutletOfRequesterMerchant() {
        return isRequesterAdmin() && resource.data.merchantId == getRequesterMerchantIdUnsafe();
      }
      function isNewOutletForRequesterMerchant() {
        return isRequesterAdmin() && request.resource.data.merchantId == getRequesterMerchantIdUnsafe();
      }
      allow read: if isOutletOfRequesterMerchant();
      allow create: if isNewOutletForRequesterMerchant();
      allow update, delete: if isOutletOfRequesterMerchant();
    }

    match /products/{productId} {
      function isProductOfRequesterMerchantOrKasir() {
        let requesterData = getRequesterDocumentData();
        return requesterData != null &&
               (requesterData.role == 'admin' || requesterData.role == 'kasir') &&
               resource.data.merchantId == requesterData.merchantId;
      }
      function isNewProductForRequesterMerchant() { // Hanya admin yang bisa create
        return isRequesterAdmin() && request.resource.data.merchantId == getRequesterMerchantIdUnsafe();
      }
      function canAdminUpdateProduct() {
         return isRequesterAdmin() && resource.data.merchantId == getRequesterMerchantIdUnsafe();
      }
      function canKasirUpdateStock() {
        let requesterData = getRequesterDocumentData();
        return requesterData != null && requesterData.role == 'kasir' &&
               resource.data.merchantId == requesterData.merchantId &&
               request.resource.data.diff(resource.data).affectedKeys().hasOnly(['units', 'updatedAt']); // Kasir hanya boleh update unit (stok) dan timestamp
      }

      allow read: if isProductOfRequesterMerchantOrKasir();
      allow create: if isNewProductForRequesterMerchant();
      allow update: if canAdminUpdateProduct() || canKasirUpdateStock();
      allow delete: if canAdminUpdateProduct(); // Hanya admin yang bisa delete
    }

    match /suppliers/{supplierId} {
      function isSupplierOfRequesterMerchant() {
        return isRequesterAdmin() && resource.data.merchantId == getRequesterMerchantIdUnsafe();
      }
      function isNewSupplierForRequesterMerchant() {
        return isRequesterAdmin() && request.resource.data.merchantId == getRequesterMerchantIdUnsafe();
      }
      allow read: if isSupplierOfRequesterMerchant();
      allow create: if isNewSupplierForRequesterMerchant();
      allow update, delete: if isSupplierOfRequesterMerchant();
    }

     match /settings/{settingsMerchantId} {
      function isSettingsForRequesterMerchant() {
        // settingsMerchantId in path is the merchantId
        return isRequesterAdmin() && settingsMerchantId == getRequesterMerchantIdUnsafe();
      }
      allow read, write: if isSettingsForRequesterMerchant();
    }

    match /transactions/{transactionId} {
      function isKasirOrAdminCreatingTransactionForOwnMerchant() {
        let requesterData = getRequesterDocumentData();
        if (requesterData == null || request.resource.data.merchantId != requesterData.merchantId) {
          return false;
        }
        if (requesterData.role == 'admin') {
          return true; // Admin bisa buat transaksi untuk merchantnya
        }
        if (requesterData.role == 'kasir') {
          // Kasir harus punya akses ke outlet yang dituju
          return requesterData.outlets != null &&
                 requesterData.outlets.hasAny([request.resource.data.outletId]);
        }
        return false;
      }
      function canReadTransaction() {
        let requesterData = getRequesterDocumentData();
        if (requesterData == null || resource.data.merchantId != requesterData.merchantId) {
          return false;
        }
        return requesterData.role == 'admin' || requesterData.role == 'kasir';
      }

      allow create: if isKasirOrAdminCreatingTransactionForOwnMerchant();
      allow read: if canReadTransaction();
      allow update, delete: if false; // Umumnya transaksi tidak diupdate/delete
    }
  }
}

    