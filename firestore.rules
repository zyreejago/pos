
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions (Sangat Disederhanakan untuk Parser) ---
    function isSignedIn() {
      return request.auth != null;
    }

    // Mengambil data pengguna dari Firestore.
    function getUserData(uid) {
      // Tidak ada 'let' di sini. Langsung gunakan path.
      return exists(/databases/$(database)/documents/users/$(uid)) ?
             get(/databases/$(database)/documents/users/$(uid)).data :
             null;
    }

    // Memeriksa apakah pengguna yang SAAT INI LOGIN adalah superadmin.
    function isUserLoggedInAsSuperadmin() {
      // Tidak ada 'if' atau 'let' internal.
      return isSignedIn() &&
             getUserData(request.auth.uid) != null &&
             getUserData(request.auth.uid).role == 'superadmin';
    }

    // Memeriksa apakah pengguna dengan UID tertentu memiliki peran tertentu (non-superadmin).
    function doesUserHaveRole(uid, targetRole) {
      // Tidak ada 'if' atau 'let' internal.
      return isSignedIn() && // Pastikan request.auth ada jika menggunakan request.auth.uid di pemanggil
             uid != null &&
             getUserData(uid) != null &&
             getUserData(uid).role == targetRole;
    }

    // Memeriksa apakah pengguna dengan UID tertentu terafiliasi dengan merchantId tertentu.
    function isUserBelongingToMerchant(uid, targetMerchantId) {
      // Tidak ada 'if' atau 'let' internal.
      return isSignedIn() && // Sama seperti di atas
             uid != null &&
             getUserData(uid) != null &&
             getUserData(uid).merchantId == targetMerchantId;
    }

    // --- Aturan Global untuk Superadmin ---
    match /{document=**} {
      allow read, write: if isUserLoggedInAsSuperadmin();
    }

    // --- Aturan Spesifik per Koleksi ---
    match /users/{userId} {
      function isDocumentOwner() {
        return request.auth.uid == userId;
      }

      function isRequesterAdminOfTargetUsersMerchant() {
        return resource.data != null && resource.data.merchantId != null &&
               doesUserHaveRole(request.auth.uid, 'admin') &&
               isUserBelongingToMerchant(request.auth.uid, resource.data.merchantId);
      }

      function isCurrentAdminCreatingKasirForOwnMerchant() {
        // Panggilan getUserData(request.auth.uid).role sudah ada di doesUserHaveRole
        // Panggilan getUserData(request.auth.uid).merchantId dibutuhkan untuk perbandingan
        return doesUserHaveRole(request.auth.uid, 'admin') &&
               getUserData(request.auth.uid) != null && // Memastikan merchantId bisa diakses
               request.resource.data.merchantId == getUserData(request.auth.uid).merchantId;
      }

      allow read: if isDocumentOwner() || isRequesterAdminOfTargetUsersMerchant();

      allow create: if (isUserLoggedInAsSuperadmin() &&
                        request.resource.data.role == 'admin' &&
                        request.resource.data.status == 'active') ||
                       (isCurrentAdminCreatingKasirForOwnMerchant() && request.resource.data.role == 'kasir') ||
                       (request.auth.uid == userId &&
                        request.resource.data.role == 'admin' &&
                        request.resource.data.status == 'pending_approval' &&
                        request.resource.data.merchantId == request.auth.uid);

      allow update: if isDocumentOwner() || isRequesterAdminOfTargetUsersMerchant();

      allow delete: if (isUserLoggedInAsSuperadmin() && resource.data.role != 'superadmin' && userId != request.auth.uid) ||
                       (doesUserHaveRole(request.auth.uid, 'admin') &&
                        resource.data != null && resource.data.role == 'kasir' &&
                        isUserBelongingToMerchant(request.auth.uid, resource.data.merchantId));
    }

    match /outlets/{outletId} {
      function isOutletBelongingToCurrentAdmin() {
        return resource.data != null && resource.data.merchantId != null &&
               doesUserHaveRole(request.auth.uid, 'admin') &&
               isUserBelongingToMerchant(request.auth.uid, resource.data.merchantId);
      }
      function isCurrentAdminCreatingOutletForOwnMerchant() {
        return doesUserHaveRole(request.auth.uid, 'admin') &&
               getUserData(request.auth.uid) != null &&
               request.resource.data.merchantId == getUserData(request.auth.uid).merchantId;
      }

      allow read: if doesUserHaveRole(request.auth.uid, 'admin') && resource.data != null && isUserBelongingToMerchant(request.auth.uid, resource.data.merchantId);
      allow create: if isCurrentAdminCreatingOutletForOwnMerchant();
      allow update, delete: if isOutletBelongingToCurrentAdmin();
    }

    match /products/{productId} {
      function isProductBelongingToCurrentAdmin() {
        return resource.data != null && resource.data.merchantId != null &&
               doesUserHaveRole(request.auth.uid, 'admin') &&
               isUserBelongingToMerchant(request.auth.uid, resource.data.merchantId);
      }
      function isCurrentAdminCreatingProductForOwnMerchant() {
        return doesUserHaveRole(request.auth.uid, 'admin') &&
               getUserData(request.auth.uid) != null &&
               request.resource.data.merchantId == getUserData(request.auth.uid).merchantId;
      }
      function isCurrentKasirUpdatingStock() {
        return resource.data != null && resource.data.merchantId != null &&
               doesUserHaveRole(request.auth.uid, 'kasir') &&
               isUserBelongingToMerchant(request.auth.uid, resource.data.merchantId) &&
               request.resource.data.diff(resource.data).affectedKeys().hasOnly(['units']);
      }

      allow read: if (doesUserHaveRole(request.auth.uid, 'admin') || doesUserHaveRole(request.auth.uid, 'kasir')) && resource.data != null && isUserBelongingToMerchant(request.auth.uid, resource.data.merchantId);
      allow create: if isCurrentAdminCreatingProductForOwnMerchant();
      allow update: if isProductBelongingToCurrentAdmin() || isCurrentKasirUpdatingStock();
      allow delete: if isProductBelongingToCurrentAdmin();
    }

    match /suppliers/{supplierId} {
      function isSupplierBelongingToCurrentAdmin() {
        return resource.data != null && resource.data.merchantId != null &&
               doesUserHaveRole(request.auth.uid, 'admin') &&
               isUserBelongingToMerchant(request.auth.uid, resource.data.merchantId);
      }
      function isCurrentAdminCreatingSupplierForOwnMerchant() {
        return doesUserHaveRole(request.auth.uid, 'admin') &&
               getUserData(request.auth.uid) != null &&
               request.resource.data.merchantId == getUserData(request.auth.uid).merchantId;
      }

      allow read: if isSupplierBelongingToCurrentAdmin();
      allow create: if isCurrentAdminCreatingSupplierForOwnMerchant();
      allow update, delete: if isSupplierBelongingToCurrentAdmin();
    }

     match /settings/{settingsMerchantId} {
      function isSettingsForCurrentAdminMerchant() {
        return doesUserHaveRole(request.auth.uid, 'admin') &&
               getUserData(request.auth.uid) != null &&
               getUserData(request.auth.uid).merchantId == settingsMerchantId;
      }
      allow read, write: if isSettingsForCurrentAdminMerchant();
    }

    match /transactions/{transactionId} {
      allow create: if (
                        (doesUserHaveRole(request.auth.uid, 'kasir') || doesUserHaveRole(request.auth.uid, 'admin')) &&
                        isUserBelongingToMerchant(request.auth.uid, request.resource.data.merchantId) &&
                        // Memastikan admin bisa transaksi di outlet mana saja milik merchantnya,
                        // atau kasir hanya bisa di outlet yang terdaftar padanya.
                        (doesUserHaveRole(request.auth.uid, 'admin') || (getUserData(request.auth.uid).outlets != null && request.resource.data.outletId in getUserData(request.auth.uid).outlets))
                      );
      allow read: if (doesUserHaveRole(request.auth.uid, 'admin') || doesUserHaveRole(request.auth.uid, 'kasir')) && resource.data != null && isUserBelongingToMerchant(request.auth.uid, resource.data.merchantId);
    }
  }
}

    