
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isUserLoggedIn() {
      return request.auth != null && request.auth.uid != null;
    }

    function userDocumentExists(uid) {
      return exists(/databases/$(database)/documents/users/$(uid));
    }

    // Unsafe: Call only after userDocumentExists(request.auth.uid)
    function getRequesterDataUnsafe() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function getRequesterRoleUnsafe() {
      // This function assumes userDocumentExists(request.auth.uid) has been checked by the caller
      // or the context implies it (e.g., within a rule already guarded by isUserLoggedIn and userDocumentExists).
      // It's "unsafe" because direct access to .data.role would fail if the document doesn't exist.
      let requesterDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      if (!requesterDoc.exists()) {
        // This case should ideally be prevented by prior checks like userDocumentExists().
        // However, as a safeguard or for specific scenarios, you might return a non-role or handle it.
        // For strict role checking, relying on prior exists() is better.
        return null; // Or some other indicator of no role found / document not found
      }
      return requesterDoc.data.role;
    }

    function getRequesterMerchantIdUnsafe() {
      // Similar "unsafe" caution as getRequesterRoleUnsafe()
      let requesterDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      if (!requesterDoc.exists()) {
        return null;
      }
      return requesterDoc.data.merchantId;
    }

    // Specific role checks
    function isRequesterSuperAdmin() {
      return isUserLoggedIn() &&
             userDocumentExists(request.auth.uid) &&
             getRequesterRoleUnsafe() == 'superadmin';
    }

    function isRequesterAdmin() {
      return isUserLoggedIn() &&
             userDocumentExists(request.auth.uid) &&
             getRequesterRoleUnsafe() == 'admin';
    }

    function isRequesterKasir() {
      return isUserLoggedIn() &&
             userDocumentExists(request.auth.uid) &&
             getRequesterRoleUnsafe() == 'kasir';
    }

    // Check if the request is coming from an admin of the target user's merchant
    function isRequesterAdminOfTargetUserMerchant(targetUserId) {
      if (!isRequesterAdmin()) {
        return false;
      }
      // Ensure target user document exists before trying to access its data
      if (!userDocumentExists(targetUserId)) {
        return false; 
      }
      let targetUserData = get(/databases/$(database)/documents/users/$(targetUserId)).data;
      // getRequesterMerchantIdUnsafe() is okay here because isRequesterAdmin() already confirmed exists()
      return targetUserData.merchantId == getRequesterMerchantIdUnsafe();
    }

     // For creating kasirs: check if the current user is an admin,
     // and the new user document being created has role 'kasir' and a merchantId.
    function isCreatingKasirDocument() {
      return isUserLoggedIn() &&  // Ensures request.auth is not null
             request.resource.data.role == 'kasir' &&
             request.resource.data.merchantId != null; // Client must send merchantId
    }

    // For new merchant admin self-registration
    function isSelfRegisteringAsPendingMerchantAdmin() {
      return isUserLoggedIn() &&
             request.resource.data.role == 'admin' &&
             request.resource.data.status == 'pending_approval' &&
             request.resource.data.merchantId == request.auth.uid && // merchantId is user's own UID
             request.resource.data.id == request.auth.uid; // document ID is user's own UID
    }

    match /users/{userId} {
      allow read: if isUserLoggedIn() && (
                    request.auth.uid == userId || // User can read their own data
                    isRequesterSuperAdmin() ||     // Superadmin can read any user
                    isRequesterAdminOfTargetUserMerchant(userId) // Admin can read users of their own merchant
                  );

      allow create: if isCreatingKasirDocument() ||
                       isSelfRegisteringAsPendingMerchantAdmin();

      allow update: if isUserLoggedIn() && (
                      (isRequesterSuperAdmin() && userId != request.auth.uid && get(/databases/$(database)/documents/users/$(userId)).data.role != 'superadmin') || // Superadmin can update any non-superadmin user
                      (isRequesterAdmin() && isRequesterAdminOfTargetUserMerchant(userId) && request.resource.data.email == resource.data.email && request.resource.data.role == resource.data.role && request.resource.data.role == 'kasir') || // Admin can update kasirs of their merchant (specific fields)
                      (request.auth.uid == userId && request.resource.data.email == resource.data.email && request.resource.data.role == resource.data.role) // User can update limited fields of their own profile
                    );
      
      allow delete: if isRequesterSuperAdmin() && get(/databases/$(database)/documents/users/$(userId)).data.role != 'superadmin'; // Superadmin can delete any non-superadmin
    }

    match /products/{productId} {
      allow read: if isUserLoggedIn(); 

      allow create: if isRequesterAdmin() &&
                       request.resource.data.merchantId == getRequesterMerchantIdUnsafe();
      
      allow update: if isRequesterAdmin() &&
                       resource.data.merchantId == getRequesterMerchantIdUnsafe();

      allow delete: if isRequesterAdmin() &&
                       resource.data.merchantId == getRequesterMerchantIdUnsafe();
    }

    match /suppliers/{supplierId} {
      allow read: if isUserLoggedIn();

      allow create: if isRequesterAdmin() &&
                       request.resource.data.merchantId == getRequesterMerchantIdUnsafe();
      
      allow update: if isRequesterAdmin() &&
                       resource.data.merchantId == getRequesterMerchantIdUnsafe();

      allow delete: if isRequesterAdmin() &&
                       resource.data.merchantId == getRequesterMerchantIdUnsafe();
    }

    match /outlets/{outletId} {
      allow read: if isUserLoggedIn();

      allow create: if isRequesterAdmin() &&
                       request.resource.data.merchantId == getRequesterMerchantIdUnsafe();

      allow update: if isRequesterAdmin() &&
                       resource.data.merchantId == getRequesterMerchantIdUnsafe();
      
      allow delete: if isRequesterAdmin() &&
                       resource.data.merchantId == getRequesterMerchantIdUnsafe();
    }

    match /transactions/{transactionId} {
      allow create: if (isRequesterAdmin() || isRequesterKasir()) &&
                       request.resource.data.merchantId == getRequesterMerchantIdUnsafe() &&
                       request.resource.data.kasirId == request.auth.uid;
                       // Kasir's assigned outlets check would be here if needed:
                       // && getRequesterDataUnsafe().outlets.hasAny([request.resource.data.outletId])

      allow read: if isRequesterSuperAdmin() ||
                     ( (isRequesterAdmin() || isRequesterKasir()) && 
                       getRequesterMerchantIdUnsafe() == resource.data.merchantId );
      
      allow update, delete: if false; // Transactions generally shouldn't be mutable from client
    }

    match /settings/{merchantId} {
      // Admin of the merchant can read and write their own settings document.
      allow read, write: if isUserLoggedIn() &&
                            userDocumentExists(request.auth.uid) &&
                            getRequesterRoleUnsafe() == 'admin' &&
                            getRequesterMerchantIdUnsafe() == merchantId;
    }
  }
}

    