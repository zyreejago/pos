
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---

    // Fungsi untuk memeriksa apakah pengguna sudah login (terautentikasi).
    function isUserLoggedIn() {
      return request.auth != null;
    }

    // Fungsi untuk memeriksa apakah dokumen pengguna ada di Firestore.
    // Ini penting sebelum mencoba mengakses request.auth.token.xxx atau resource.data.xxx
    // Namun, untuk peran yang disimpan di Firestore, kita perlu getUserData.
    function userDocumentExists(uid) {
      return exists(/databases/$(database)/documents/users/$(uid));
    }

    // Fungsi untuk mendapatkan data dokumen pengguna dari Firestore.
    // Pemanggil fungsi ini HARUS memastikan dokumen ada (misalnya dengan userDocumentExists)
    // sebelum mencoba mengakses field dari hasilnya, untuk menghindari error.
    // Kita akan panggil ini secara langsung di dalam fungsi lain yang sudah melakukan pengecekan.
    function getUserDataUnchecked(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data;
    }

    // Fungsi untuk memeriksa apakah pengguna yang login adalah superadmin.
    function isRequesterSuperadmin() {
      return isUserLoggedIn() &&
             userDocumentExists(request.auth.uid) &&
             getUserDataUnchecked(request.auth.uid).role == 'superadmin';
    }

    // Fungsi untuk memeriksa apakah pengguna yang login adalah admin.
    function isRequesterAdmin() {
      return isUserLoggedIn() &&
             userDocumentExists(request.auth.uid) &&
             getUserDataUnchecked(request.auth.uid).role == 'admin';
    }

    // Fungsi untuk memeriksa apakah pengguna yang login adalah kasir.
    function isRequesterKasir() {
      return isUserLoggedIn() &&
             userDocumentExists(request.auth.uid) &&
             getUserDataUnchecked(request.auth.uid).role == 'kasir';
    }

    // Fungsi untuk mendapatkan merchantId dari pengguna yang sedang login (jika admin atau kasir).
    // Pemanggil HARUS sudah memastikan pengguna adalah admin/kasir dan dokumennya ada.
    function getRequesterMerchantIdUnchecked() {
      return getUserDataUnchecked(request.auth.uid).merchantId;
    }

    // Fungsi untuk memeriksa apakah pengguna yang login adalah pemilik dokumen user yang diakses.
    function isDocumentOwner(userId) {
      return isUserLoggedIn() && request.auth.uid == userId;
    }

    // --- Aturan Spesifik per Koleksi ---

    match /users/{userId} {

      // Kondisi: Admin dari merchant yang sama dengan user yang diakses.
      function isRequesterAdminOfTargetUserMerchant() {
        // resource.data adalah data dokumen user yang sedang diakses/dibaca (existing document)
        return isRequesterAdmin() &&
               resource.data != null && // Pastikan dokumen user yang diakses ada
               resource.data.merchantId != null && // Pastikan user yang diakses punya merchantId
               resource.data.merchantId == getRequesterMerchantIdUnchecked();
      }

      // Kondisi: User yang login sedang mendaftar sendiri sebagai admin merchant baru (status pending).
      function isSelfRegisteringAsPendingMerchantAdmin() {
        return isUserLoggedIn() &&
               request.auth.uid == userId && // Mendaftar untuk diri sendiri
               request.resource.data.role == 'admin' &&
               request.resource.data.status == 'pending_approval' &&
               request.resource.data.merchantId == request.auth.uid; // merchantId diisi dengan UID sendiri
      }

      // Kondisi: Seorang pengguna (siapapun yang login) membuat dokumen baru dengan role 'kasir'.
      // Klien (aplikasi Anda) bertanggung jawab untuk mengisi merchantId kasir dengan benar.
      function isCreatingKasirDocument() {
        return isUserLoggedIn() &&
               request.resource.data.role == 'kasir' &&
               request.resource.data.merchantId != null; // Pastikan klien mengirim merchantId
      }

      // --- Izin Baca ---
      allow read: if isUserLoggedIn() && (
                      isDocumentOwner(userId) ||
                      isRequesterSuperadmin() ||
                      isRequesterAdminOfTargetUserMerchant()
                    );

      // --- Izin Buat (Create) ---
      allow create: if isSelfRegisteringAsPendingMerchantAdmin() || // Pengguna mendaftar sendiri sbg admin merchant baru
                       isCreatingKasirDocument() ||                 // Siapapun yg login bisa buat dokumen kasir (dengan role kasir & ada merchantId)
                       (isRequesterSuperadmin() && request.resource.data.role == 'admin' && request.resource.data.status == 'active' && request.resource.data.merchantId != null); // Superadmin membuat admin baru

      // --- Izin Update ---
      allow update: if isUserLoggedIn() && (
                      isDocumentOwner(userId) || // Pemilik dokumen bisa update dirinya sendiri
                      isRequesterSuperadmin() || // Superadmin bisa update siapa saja
                      (isRequesterAdmin() && // Admin bisa update kasir di merchantnya
                       resource.data.role == 'kasir' &&
                       resource.data.merchantId == getRequesterMerchantIdUnchecked()
                      )
                    );
      // Catatan untuk update: admin tidak bisa update admin lain atau superadmin via aturan ini.
      // Superadmin hanya bisa diupdate oleh dirinya sendiri atau superadmin lain.

      // --- Izin Hapus ---
      allow delete: if isUserLoggedIn() && (
                      (isRequesterSuperadmin() && resource.data.role != 'superadmin' && userId != request.auth.uid) || // Superadmin bisa hapus siapa saja kecuali dirinya atau superadmin lain
                      (isRequesterAdmin() && // Admin bisa hapus kasir di merchantnya
                       resource.data.role == 'kasir' &&
                       resource.data.merchantId == getRequesterMerchantIdUnchecked()
                      )
                    );
    }


    match /outlets/{outletId} {
      // Kondisi: Outlet ini milik merchant tempat admin yang login bernaung.
      function isOutletOfRequesterMerchant() {
        return isRequesterAdmin() &&
               resource.data != null && // Dokumen outlet yang diakses ada
               resource.data.merchantId == getRequesterMerchantIdUnchecked();
      }

      // Kondisi: Admin yang login sedang membuat outlet untuk merchantnya sendiri.
      function isAdminCreatingOutletForOwnMerchant() {
        return isRequesterAdmin() &&
               request.resource.data.merchantId == getRequesterMerchantIdUnchecked();
      }

      allow read: if isUserLoggedIn() && (isRequesterAdmin() || isRequesterKasir()) && // Admin atau Kasir bisa baca outlet
                     resource.data != null &&
                     resource.data.merchantId == getRequesterMerchantIdUnchecked(); // Jika mereka dari merchant yang sama
      allow create: if isAdminCreatingOutletForOwnMerchant();
      allow update, delete: if isOutletOfRequesterMerchant();
    }


    match /products/{productId} {
      function isProductOfRequesterMerchant() {
        return (isRequesterAdmin() || isRequesterKasir()) && // Admin atau kasir
               resource.data != null &&
               resource.data.merchantId == getRequesterMerchantIdUnchecked();
      }

      function isAdminCreatingProductForOwnMerchant() {
        return isRequesterAdmin() &&
               request.resource.data.merchantId == getRequesterMerchantIdUnchecked();
      }

      // Kasir hanya boleh update stock (field 'units')
      function isKasirUpdatingOwnMerchantProductStock() {
        return isRequesterKasir() &&
               resource.data != null &&
               resource.data.merchantId == getRequesterMerchantIdUnchecked() &&
               request.resource.data.keys().hasOnly(['units', 'updatedAt']); // Hanya field units & updatedAt yg boleh diubah kasir
      }

      allow read: if isProductOfRequesterMerchant();
      allow create: if isAdminCreatingProductForOwnMerchant();
      allow update: if (isRequesterAdmin() && isProductOfRequesterMerchant()) || // Admin bisa update semua produk di merchantnya
                       isKasirUpdatingOwnMerchantProductStock(); // Kasir hanya bisa update stok
      allow delete: if isRequesterAdmin() && isProductOfRequesterMerchant();
    }


    match /suppliers/{supplierId} {
      function isSupplierOfRequesterMerchant() {
        return isRequesterAdmin() &&
               resource.data != null &&
               resource.data.merchantId == getRequesterMerchantIdUnchecked();
      }

      function isAdminCreatingSupplierForOwnMerchant() {
        return isRequesterAdmin() &&
               request.resource.data.merchantId == getRequesterMerchantIdUnchecked();
      }

      allow read, create, update, delete: if isSupplierOfRequesterMerchant() || isAdminCreatingSupplierForOwnMerchant();
    }


    match /settings/{settingsMerchantId} {
      function isSettingsForRequesterMerchant() {
        return isRequesterAdmin() &&
               settingsMerchantId == getRequesterMerchantIdUnchecked();
      }
      allow read, write: if isSettingsForRequesterMerchant();
    }


    match /transactions/{transactionId} {
      function isTransactionCreatorFromOwnMerchant() {
        // Memeriksa apakah pembuat transaksi (kasir atau admin) berasal dari merchant yang sama dengan data transaksi
        return (isRequesterKasir() || isRequesterAdmin()) &&
               request.resource.data.merchantId == getRequesterMerchantIdUnchecked();
      }

      function isKasirAccessingOwnOutletTransaction() {
        // Jika pembuat adalah kasir, pastikan mereka memiliki akses ke outlet transaksi tersebut
        // Perlu field 'outlets' (array) di dokumen kasir.
        let kasirData = getUserDataUnchecked(request.auth.uid);
        return isRequesterKasir() &&
               kasirData.outlets != null &&
               request.resource.data.outletId in kasirData.outlets;
      }
      
      function isTransactionReaderFromOwnMerchant() {
          return (isRequesterKasir() || isRequesterAdmin()) &&
                 resource.data != null &&
                 resource.data.merchantId == getRequesterMerchantIdUnchecked();
      }

      // Izin Buat Transaksi:
      // 1. Pembuat adalah kasir ATAU admin.
      // 2. Pembuat berasal dari merchant yang sama dengan data transaksi.
      // 3. Jika pembuat adalah kasir, mereka harus punya akses ke outlet transaksi tersebut. Admin tidak perlu cek outlet.
      allow create: if isTransactionCreatorFromOwnMerchant() &&
                       (isRequesterAdmin() || isKasirAccessingOwnOutletTransaction());

      // Izin Baca Transaksi:
      // 1. Pembaca adalah kasir ATAU admin.
      // 2. Pembaca berasal dari merchant yang sama dengan data transaksi.
      // 3. Jika pembaca adalah kasir, mereka hanya bisa baca transaksi dari outlet yang mereka akses. Admin bisa baca semua.
      allow read: if isTransactionReaderFromOwnMerchant() &&
                     (isRequesterAdmin() || 
                       (isRequesterKasir() && getUserDataUnchecked(request.auth.uid).outlets != null && resource.data.outletId in getUserDataUnchecked(request.auth.uid).outlets)
                     );
      // Transaksi umumnya tidak diupdate atau delete oleh kasir/admin biasa dari POS.
      // Operasi tersebut (jika ada) biasanya dilakukan oleh superadmin atau proses backend.
    }
  }
}

    