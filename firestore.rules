
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function userDocumentExists(uid) {
      return exists(/databases/$(database)/documents/users/$(uid));
    }

    function getUserDocumentDataUnsafe(uid) {
      // Pemanggil HARUS memastikan dokumen ada via userDocumentExists(uid) sebelum mengakses field.
      return get(/databases/$(database)/documents/users/$(uid)).data;
    }

    function isUserLoggedIn() {
      return request.auth != null;
    }

    // Peran superadmin hanya dicek pada dirinya sendiri saat login.
    function isRequesterSuperAdmin() {
      return isUserLoggedIn() &&
             userDocumentExists(request.auth.uid) &&
             getUserDocumentDataUnsafe(request.auth.uid).role == 'superadmin';
    }

    // Mengecek apakah pengguna yang request adalah admin.
    function isRequesterAdmin() {
      return isUserLoggedIn() &&
             userDocumentExists(request.auth.uid) &&
             getUserDocumentDataUnsafe(request.auth.uid).role == 'admin';
    }

    // Mendapatkan merchantId dari pengguna yang request (admin/kasir), JANGAN PANGGIL JIKA DOKUMEN TIDAK ADA.
    function getRequesterMerchantIdUnsafe() {
      return getUserDocumentDataUnsafe(request.auth.uid).merchantId;
    }
    
    // Mendapatkan outlet yg diassign ke kasir, JANGAN PANGGIL JIKA DOKUMEN TIDAK ADA.
    function getRequesterAssignedOutletsUnsafe() {
        return getUserDocumentDataUnsafe(request.auth.uid).outlets;
    }

    // Memeriksa apakah pengguna yang request adalah admin dan memiliki konteks merchantId yang valid.
    function isRequesterAdminWithMerchantContext() {
      return isRequesterAdmin() &&
             getRequesterMerchantIdUnsafe() != null;
    }
    
    // Memeriksa apakah pengguna yang request adalah kasir dan memiliki konteks merchantId yang valid.
    function isRequesterKasirWithMerchantContext() {
      return isUserLoggedIn() &&
             userDocumentExists(request.auth.uid) &&
             getUserDocumentDataUnsafe(request.auth.uid).role == 'kasir' &&
             getRequesterMerchantIdUnsafe() != null;
    }

    // Memeriksa apakah dokumen target (resource) dimiliki oleh merchant yang sama dengan requester (admin/kasir).
    function isResourceOfSameMerchantAsRequester(resourceData) {
      return resourceData.merchantId == getRequesterMerchantIdUnsafe();
    }

    // Kondisi untuk registrasi mandiri oleh calon merchant admin, statusnya pending.
    function isSelfRegisteringAsPendingMerchantAdmin() {
      return request.auth.uid == userId && // userId adalah path dari dokumen yang diakses
             request.resource.data.role == 'admin' &&
             request.resource.data.status == 'pending_approval' &&
             request.resource.data.merchantId == request.auth.uid; // merchantId-nya adalah UID-nya sendiri
    }

    // --- Aturan Global untuk Superadmin ---
    match /{document=**} {
      allow read, write: if isRequesterSuperAdmin();
    }

    // --- Aturan Spesifik per Koleksi ---

    // Koleksi Users
    match /users/{userId} {
      function isDocumentOwner() {
        return request.auth.uid == userId;
      }

      // Memeriksa apakah requester adalah admin dari merchant tempat user target (resource) berada.
      function isRequesterAdminOfTargetUserMerchant() {
        return isRequesterAdminWithMerchantContext() &&
               resource.data.merchantId != null &&
               isResourceOfSameMerchantAsRequester(resource.data);
      }

      // Kondisi baru: Setiap pengguna terautentikasi boleh membuat dokumen kasir.
      function isCreatingKasirDocument() {
        return isUserLoggedIn() &&
               request.resource.data.role == 'kasir' &&
               request.resource.data.merchantId != null; // Klien tetap harus mengirimkan merchantId
      }

      // Seorang admin boleh menghapus kasir dari merchantnya sendiri.
      function isAdminDeletingKasirFromOwnMerchant() {
        return isRequesterAdminWithMerchantContext() &&
               resource.data.role == 'kasir' &&
               isResourceOfSameMerchantAsRequester(resource.data);
      }

      // Seorang admin boleh mengupdate kasir dari merchantnya sendiri.
      // Atau user mengupdate dirinya sendiri.
      function isAdminUpdatingKasirOrSelfUpdate() {
        return (isRequesterAdminWithMerchantContext() &&
                resource.data.role == 'kasir' && // Hanya bisa update kasir
                isResourceOfSameMerchantAsRequester(resource.data)) ||
               isDocumentOwner(); // Atau user mengupdate profilnya sendiri
      }

      allow read: if isDocumentOwner() || isRequesterAdminOfTargetUserMerchant() || isRequesterSuperAdmin();

      allow create: if isCreatingKasirDocument() || // << INI PERUBAHAN UTAMA
                       isSelfRegisteringAsPendingMerchantAdmin() ||
                       isRequesterSuperAdmin(); // Superadmin tetap bisa membuat admin lain

      allow update: if isAdminUpdatingKasirOrSelfUpdate() || isRequesterSuperAdmin();

      allow delete: if (isRequesterSuperAdmin() && resource.data.role != 'superadmin' && userId != request.auth.uid) ||
                       isAdminDeletingKasirFromOwnMerchant();
    }

    // Koleksi Outlets
    match /outlets/{outletId} {
      function isOutletOfRequesterMerchant() {
        return isRequesterAdminWithMerchantContext() && // Pastikan requester adalah admin dengan merchantId
               resource.data.merchantId != null &&
               isResourceOfSameMerchantAsRequester(resource.data);
      }

      function isAdminCreatingOutletForOwnMerchant() {
        return isRequesterAdminWithMerchantContext() &&
               request.resource.data.merchantId == getRequesterMerchantIdUnsafe();
      }

      allow read: if isOutletOfRequesterMerchant() || isRequesterSuperAdmin();
      allow create: if isAdminCreatingOutletForOwnMerchant() || isRequesterSuperAdmin();
      allow update, delete: if isOutletOfRequesterMerchant() || isRequesterSuperAdmin();
    }

    // Koleksi Products
    match /products/{productId} {
      function isProductOfRequesterMerchant() {
        return (isRequesterAdminWithMerchantContext() || isRequesterKasirWithMerchantContext()) &&
               resource.data.merchantId != null &&
               isResourceOfSameMerchantAsRequester(resource.data);
      }

      function isAdminCreatingProductForOwnMerchant() {
        return isRequesterAdminWithMerchantContext() &&
               request.resource.data.merchantId == getRequesterMerchantIdUnsafe();
      }

      // Kasir hanya boleh update 'units' (untuk stock)
      function isKasirUpdatingStockOnly() {
        return isRequesterKasirWithMerchantContext() &&
               isResourceOfSameMerchantAsRequester(resource.data) &&
               request.resource.data.diff(resource.data).affectedKeys().hasOnly(['units', 'updatedAt']);
      }

      allow read: if isProductOfRequesterMerchant() || isRequesterSuperAdmin();
      allow create: if isAdminCreatingProductForOwnMerchant() || isRequesterSuperAdmin();
      allow update: if (isRequesterAdminWithMerchantContext() && isResourceOfSameMerchantAsRequester(resource.data)) ||
                       isKasirUpdatingStockOnly() ||
                       isRequesterSuperAdmin();
      allow delete: if (isRequesterAdminWithMerchantContext() && isResourceOfSameMerchantAsRequester(resource.data)) || isRequesterSuperAdmin();
    }

    // Koleksi Suppliers
    match /suppliers/{supplierId} {
      function isSupplierOfRequesterMerchant() {
        return isRequesterAdminWithMerchantContext() &&
               resource.data.merchantId != null &&
               isResourceOfSameMerchantAsRequester(resource.data);
      }

      function isAdminCreatingSupplierForOwnMerchant() {
        return isRequesterAdminWithMerchantContext() &&
               request.resource.data.merchantId == getRequesterMerchantIdUnsafe();
      }

      allow read: if isSupplierOfRequesterMerchant() || isRequesterSuperAdmin();
      allow create: if isAdminCreatingSupplierForOwnMerchant() || isRequesterSuperAdmin();
      allow update, delete: if isSupplierOfRequesterMerchant() || isRequesterSuperAdmin();
    }

    // Koleksi Settings
    match /settings/{settingsMerchantId} {
      function isSettingsForRequesterMerchant() {
        // Hanya admin yang bisa akses settings merchantnya.
        return isRequesterAdminWithMerchantContext() &&
               getRequesterMerchantIdUnsafe() == settingsMerchantId;
      }
      allow read, write: if isSettingsForRequesterMerchant() || isRequesterSuperAdmin();
    }

    // Koleksi Transactions
    match /transactions/{transactionId} {
      // Kasir atau Admin dari merchant yang sama, dan jika kasir, harus punya akses ke outlet tersebut.
      function canCreateTransaction() {
        let isUserAllowedToTransact = (isRequesterAdminWithMerchantContext() || isRequesterKasirWithMerchantContext()) &&
                                  request.resource.data.merchantId == getRequesterMerchantIdUnsafe();
        if (!isUserAllowedToTransact) {
          return false;
        }
        // Jika kasir, cek apakah dia punya akses ke outlet transaksi
        if (getUserDocumentDataUnsafe(request.auth.uid).role == 'kasir') {
          let assignedOutlets = getRequesterAssignedOutletsUnsafe();
          return assignedOutlets != null && request.resource.data.outletId in assignedOutlets;
        }
        return true; // Admin bisa transaksi di semua outlet merchantnya
      }

      function canReadTransaction() {
        return (isRequesterAdminWithMerchantContext() || isRequesterKasirWithMerchantContext()) &&
               resource.data.merchantId != null &&
               isResourceOfSameMerchantAsRequester(resource.data);
      }

      allow create: if canCreateTransaction() || isRequesterSuperAdmin();
      allow read: if canReadTransaction() || isRequesterSuperAdmin();
      // Update & Delete transaksi biasanya tidak diizinkan atau sangat dibatasi.
      allow update, delete: if false; // Default: tidak boleh update/delete transaksi
    }
  }
}

    