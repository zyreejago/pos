
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function userDocumentExists(uid) {
      return exists(/databases/$(database)/documents/users/$(uid));
    }

    // UNSAFE: Pemanggil harus memastikan userDocumentExists(uid) sebelum memanggil ini.
    function getUserDocumentDataUnsafe(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data;
    }

    function isUserLoggedInAsRole(targetRole) {
      return request.auth != null &&
             userDocumentExists(request.auth.uid) &&
             getUserDocumentDataUnsafe(request.auth.uid).role == targetRole;
    }

    function getRequesterRoleUnsafe() { // Panggil hanya jika isUserLoggedInAsRole(some_role) true
        return getUserDocumentDataUnsafe(request.auth.uid).role;
    }

    function getRequesterMerchantIdUnsafe() { // Panggil hanya jika isUserLoggedInAsRole('admin' atau 'kasir') true
        return getUserDocumentDataUnsafe(request.auth.uid).merchantId;
    }

    function isRequestResourceForRole(targetRole) {
        return request.resource.data.role == targetRole;
    }

    function isResourceOwnedByMerchant(targetMerchantId) {
        return resource.data.merchantId == targetMerchantId;
    }

    function isRequestResourceForMerchant(targetMerchantId) {
        return request.resource.data.merchantId == targetMerchantId;
    }
    // --- End Helper Functions ---


    // --- Aturan Global untuk Superadmin ---
    // Superadmin bisa melakukan apa saja, kecuali menghapus dirinya sendiri atau mengubah role superadmin lain.
    match /{document=**} {
      allow read, write: if isUserLoggedInAsRole('superadmin');
    }

    // --- Aturan Spesifik per Koleksi ---
    match /users/{userId} {
      // Siapa yang bisa membaca dokumen pengguna?
      // Pemilik dokumen, atau admin dari merchant yang sama dengan pengguna target.
      function canReadUserDocument() {
        let isOwner = request.auth.uid == userId;
        let isRequesterAdmin = isUserLoggedInAsRole('admin');
        // Pastikan resource.data ada sebelum mengakses fieldnya
        let isTargetUserInRequesterAdminsMerchant = resource.data != null && resource.data.merchantId != null &&
                                                    isRequesterAdmin &&
                                                    getRequesterMerchantIdUnsafe() == resource.data.merchantId;
        return isOwner || isTargetUserInRequesterAdminsMerchant;
      }

      // Siapa yang bisa membuat dokumen pengguna?
      // 1. Superadmin bisa membuat admin baru (dan mengatur status aktif).
      // 2. Admin bisa membuat kasir baru (tanpa cek merchantId di rules, klien yg atur).
      // 3. Pengguna bisa mendaftar sebagai admin baru (status pending_approval, merchantId = uid sendiri).
      function canCreateUserDocument() {
        let isSuperadminCreatingAdmin = isUserLoggedInAsRole('superadmin') &&
                                        isRequestResourceForRole('admin') &&
                                        request.resource.data.status == 'active';

        // MODIFIKASI UTAMA: Admin bisa membuat kasir jika role kasir dan ada merchantId (apapun valuenya)
        let isAdminCreatingKasir = isUserLoggedInAsRole('admin') &&
                                   isRequestResourceForRole('kasir') &&
                                   request.resource.data.merchantId != null; // Pastikan merchantId dikirim klien

        let isSelfRegisteringAsAdmin = request.auth.uid == userId &&
                                       isRequestResourceForRole('admin') &&
                                       request.resource.data.status == 'pending_approval' &&
                                       request.resource.data.merchantId == request.auth.uid;
        return isSuperadminCreatingAdmin || isAdminCreatingKasir || isSelfRegisteringAsAdmin;
      }

      // Siapa yang bisa memperbarui dokumen pengguna?
      // Pemilik dokumen, atau admin dari merchant pengguna target bisa update beberapa hal.
      // Superadmin bisa update apa saja (diatur oleh aturan global).
      function canUpdateUserDocument() {
        let isOwner = request.auth.uid == userId;
        // Admin hanya boleh update nama, outlets, dan status (mis. approve) untuk user di merchantnya.
        // Tidak boleh mengubah role atau merchantId user lain.
        let isRequesterAdmin = isUserLoggedInAsRole('admin');
        let isTargetUserInRequesterAdminsMerchant = resource.data != null && resource.data.merchantId != null &&
                                                    isRequesterAdmin &&
                                                    getRequesterMerchantIdUnsafe() == resource.data.merchantId;
        let allowedFieldsForAdminUpdate = ['name', 'outlets', 'status', 'updatedAt']; // 'email' tidak diupdate di sini
        let isUpdatingAllowedFields = request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedFieldsForAdminUpdate);

        // Admin tidak boleh mengubah role user lain, atau merchantId user lain.
        let isAdminModifyingSensitiveFields = request.resource.data.role != resource.data.role ||
                                              request.resource.data.merchantId != resource.data.merchantId;


        return isOwner || (isTargetUserInRequesterAdminsMerchant && isUpdatingAllowedFields && !isAdminModifyingSensitiveFields);
      }

      // Siapa yang bisa menghapus dokumen pengguna?
      // Superadmin (bukan dirinya sendiri & bukan superadmin lain), atau admin bisa hapus kasir di merchantnya.
      function canDeleteUserDocument() {
        let isSuperadminDeletingNonSelfNonSuperadmin = isUserLoggedInAsRole('superadmin') &&
                                                       resource.data.role != 'superadmin' &&
                                                       userId != request.auth.uid;
        let isRequesterAdmin = isUserLoggedInAsRole('admin');
        let isTargetKasirInRequesterAdminsMerchant = resource.data != null && resource.data.role == 'kasir' &&
                                                     isRequesterAdmin &&
                                                     resource.data.merchantId == getRequesterMerchantIdUnsafe();
        return isSuperadminDeletingNonSelfNonSuperadmin || isTargetKasirInRequesterAdminsMerchant;
      }

      allow read: if canReadUserDocument();
      allow create: if canCreateUserDocument();
      allow update: if canUpdateUserDocument();
      allow delete: if canDeleteUserDocument();
    }

    match /outlets/{outletId} {
      function isOutletOfRequesterMerchant() {
        return resource.data != null && // Pastikan dokumen ada
               isUserLoggedInAsRole('admin') &&
               getRequesterMerchantIdUnsafe() == resource.data.merchantId;
      }
      function isCreatingOutletForOwnMerchant() {
        return isUserLoggedInAsRole('admin') &&
               request.resource.data.merchantId == getRequesterMerchantIdUnsafe();
      }

      allow read: if isOutletOfRequesterMerchant();
      allow create: if isCreatingOutletForOwnMerchant();
      allow update, delete: if isOutletOfRequesterMerchant();
    }

    match /products/{productId} {
      function isProductOfRequesterMerchant() {
        return resource.data != null && // Pastikan dokumen ada
               (isUserLoggedInAsRole('admin') || isUserLoggedInAsRole('kasir')) &&
               getRequesterMerchantIdUnsafe() == resource.data.merchantId;
      }
      function isCreatingProductForOwnMerchant() {
        return isUserLoggedInAsRole('admin') &&
               request.resource.data.merchantId == getRequesterMerchantIdUnsafe();
      }
      function isKasirUpdatingOwnMerchantProductStock() {
        return isUserLoggedInAsRole('kasir') &&
               getRequesterMerchantIdUnsafe() == resource.data.merchantId &&
               request.resource.data.diff(resource.data).affectedKeys().hasOnly(['units', 'updatedAt']);
      }

      allow read: if isProductOfRequesterMerchant();
      allow create: if isCreatingProductForOwnMerchant();
      allow update: if (isUserLoggedInAsRole('admin') && isProductOfRequesterMerchant()) || isKasirUpdatingOwnMerchantProductStock();
      allow delete: if isUserLoggedInAsRole('admin') && isProductOfRequesterMerchant();
    }

    match /suppliers/{supplierId} {
      function isSupplierOfRequesterMerchant() {
        return resource.data != null && // Pastikan dokumen ada
               isUserLoggedInAsRole('admin') &&
               getRequesterMerchantIdUnsafe() == resource.data.merchantId;
      }
      function isCreatingSupplierForOwnMerchant() {
        return isUserLoggedInAsRole('admin') &&
               request.resource.data.merchantId == getRequesterMerchantIdUnsafe();
      }

      allow read: if isSupplierOfRequesterMerchant();
      allow create: if isCreatingSupplierForOwnMerchant();
      allow update, delete: if isSupplierOfRequesterMerchant();
    }

    match /settings/{settingsMerchantId} {
      function isSettingsForRequesterAdminMerchant() {
        return isUserLoggedInAsRole('admin') &&
               getRequesterMerchantIdUnsafe() == settingsMerchantId;
      }
      allow read, write: if isSettingsForRequesterAdminMerchant();
    }

    match /transactions/{transactionId} {
      // Kasir atau Admin bisa membuat transaksi untuk merchant mereka.
      // Kasir harus terdaftar di outlet yang bersangkutan. Admin bisa untuk semua outlet merchantnya.
      function canCreateTransaction() {
        let isRequesterKasirOrAdmin = isUserLoggedInAsRole('kasir') || isUserLoggedInAsRole('admin');
        if (!isRequesterKasirOrAdmin) { return false; }

        let requesterMerchantId = getRequesterMerchantIdUnsafe();
        if (requesterMerchantId == null || request.resource.data.merchantId != requesterMerchantId) {
          return false; // Transaksi harus untuk merchant si pembuat
        }

        // Jika pembuat adalah kasir, periksa apakah dia terdaftar di outlet transaksi
        if (getRequesterRoleUnsafe() == 'kasir') {
          let kasirData = getUserDocumentDataUnsafe(request.auth.uid);
          // Pastikan kasirData.outlets adalah list dan outletId ada di dalamnya
          return kasirData.outlets is list && request.resource.data.outletId in kasirData.outlets;
        }
        return true; // Admin bisa buat transaksi untuk outlet manapun di merchantnya
      }

      // Kasir atau Admin bisa membaca transaksi dari merchant mereka.
      function canReadTransaction() {
        let isRequesterKasirOrAdmin = isUserLoggedInAsRole('kasir') || isUserLoggedInAsRole('admin');
        if (!isRequesterKasirOrAdmin || resource.data == null) { return false; }
        return getRequesterMerchantIdUnsafe() == resource.data.merchantId;
      }

      allow create: if canCreateTransaction();
      allow read: if canReadTransaction();
      // Update & Delete transaksi biasanya tidak diizinkan atau sangat terbatas.
    }
  }
}
