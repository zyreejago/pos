
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function getUserData(uid) {
      return exists(/databases/$(database)/documents/users/$(uid)) ?
             get(/databases/$(database)/documents/users/$(uid)).data :
             null;
    }

    function isUserLoggedInAsSuperadmin() {
      if (!isSignedIn()) { return false; }
      let userData = getUserData(request.auth.uid);
      return userData != null && userData.role == 'superadmin';
    }

    function doesUserHaveRole(uid, targetRole) {
      if (uid == null) { return false; } // Prevent error if uid is null
      let userData = getUserData(uid);
      return userData != null && userData.role == targetRole;
    }

    function isUserBelongingToMerchant(uid, targetMerchantId) {
      if (uid == null || targetMerchantId == null) { return false; } // Prevent error if uid or targetMerchantId is null
      let userData = getUserData(uid);
      return userData != null && userData.merchantId == targetMerchantId;
    }

    // --- Aturan Global untuk Superadmin ---
    // Superadmin bisa membaca dan menulis semua dokumen kecuali mengubah/menghapus dirinya sendiri atau superadmin lain dari /users.
    match /{document=**} {
      allow read, write: if isUserLoggedInAsSuperadmin();
    }

    // --- Aturan Spesifik per Koleksi ---
    match /users/{userId} {
      function isDocumentOwner() {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isRequesterAdminOfTargetUsersMerchant() {
        // Admin bisa membaca/update user (kasir/admin lain) dalam merchantnya.
        // Cek dulu apakah data target user (resource.data) ada dan punya merchantId.
        return isSignedIn() &&
               resource.data != null && resource.data.merchantId != null &&
               doesUserHaveRole(request.auth.uid, 'admin') &&
               isUserBelongingToMerchant(request.auth.uid, resource.data.merchantId);
      }

      function isCurrentAdminCreatingKasirForOwnMerchant() {
        // Admin yang login (request.auth.uid) membuat kasir (request.resource.data) untuk merchantId miliknya.
        // Data admin yang login harus ada, rolenya 'admin', dan punya merchantId.
        // Data kasir baru harus punya role 'kasir' dan merchantId yang sama dengan merchantId admin.
        let adminData = getUserData(request.auth.uid);
        return adminData != null &&
               adminData.role == 'admin' &&
               adminData.merchantId != null && // Pastikan admin punya merchantId
               request.resource.data.merchantId == adminData.merchantId &&
               request.resource.data.role == 'kasir';
      }

      // Superadmin membuat Admin baru untuk merchant baru (merchantId == admin baru UID) atau merchant yg sudah ada.
      function isSuperadminCreatingAdmin() {
        return isUserLoggedInAsSuperadmin() &&
               request.resource.data.role == 'admin' &&
               request.resource.data.status == 'active' &&
               request.resource.data.merchantId != null; // Pastikan merchantId ada
      }

      // Pengguna mendaftar sendiri sebagai Admin baru, statusnya pending.
      // merchantId-nya adalah UID-nya sendiri.
      function isSelfRegisteringAdmin() {
        return isSignedIn() && // Pengguna harus login untuk membuat dirinya sendiri
               request.auth.uid == userId && // Hanya bisa membuat dokumen untuk dirinya sendiri
               request.resource.data.role == 'admin' &&
               request.resource.data.status == 'pending_approval' &&
               request.resource.data.merchantId == request.auth.uid; // merchantId adalah UID sendiri
      }

      allow read: if isDocumentOwner() || isRequesterAdminOfTargetUsersMerchant() || isUserLoggedInAsSuperadmin();

      // Kondisi untuk membuat user:
      // 1. Superadmin membuat Admin baru.
      // 2. Admin yang login membuat Kasir baru untuk merchantnya.
      // 3. Pengguna mendaftar sendiri sebagai Admin baru (pending approval).
      allow create: if isSuperadminCreatingAdmin() ||
                       isCurrentAdminCreatingKasirForOwnMerchant() || // Fungsi ini sudah cek role kasir
                       isSelfRegisteringAdmin();

      // Update: pemilik dokumen, atau admin dari merchant user tersebut, atau superadmin.
      // Superadmin tidak bisa update superadmin lain atau dirinya sendiri melalui path ini.
      allow update: if isDocumentOwner() ||
                       isRequesterAdminOfTargetUsersMerchant() ||
                       (isUserLoggedInAsSuperadmin() && resource.data.role != 'superadmin' && userId != request.auth.uid);

      // Delete: admin menghapus kasir di merchantnya, atau superadmin menghapus non-superadmin.
      // Superadmin tidak bisa hapus dirinya sendiri atau superadmin lain.
      allow delete: if (isUserLoggedInAsSuperadmin() && resource.data.role != 'superadmin' && userId != request.auth.uid) ||
                       (doesUserHaveRole(request.auth.uid, 'admin') &&
                        resource.data != null && resource.data.role == 'kasir' &&
                        isUserBelongingToMerchant(request.auth.uid, resource.data.merchantId));
    }

    match /outlets/{outletId} {
      function isOutletBelongingToCurrentAdmin() {
        return resource.data != null && resource.data.merchantId != null &&
               doesUserHaveRole(request.auth.uid, 'admin') &&
               isUserBelongingToMerchant(request.auth.uid, resource.data.merchantId);
      }
      function isCurrentAdminCreatingOutletForOwnMerchant() {
        let adminData = getUserData(request.auth.uid);
        return adminData != null &&
               adminData.role == 'admin' &&
               adminData.merchantId != null &&
               request.resource.data.merchantId == adminData.merchantId;
      }

      allow read: if (doesUserHaveRole(request.auth.uid, 'admin') && resource.data != null && isUserBelongingToMerchant(request.auth.uid, resource.data.merchantId)) || isUserLoggedInAsSuperadmin();
      allow create: if isCurrentAdminCreatingOutletForOwnMerchant() || isUserLoggedInAsSuperadmin();
      allow update, delete: if isOutletBelongingToCurrentAdmin() || isUserLoggedInAsSuperadmin();
    }

    match /products/{productId} {
      function isProductBelongingToCurrentAdmin() {
        return resource.data != null && resource.data.merchantId != null &&
               doesUserHaveRole(request.auth.uid, 'admin') &&
               isUserBelongingToMerchant(request.auth.uid, resource.data.merchantId);
      }
      function isCurrentAdminCreatingProductForOwnMerchant() {
         let adminData = getUserData(request.auth.uid);
         return adminData != null &&
                adminData.role == 'admin' &&
                adminData.merchantId != null &&
                request.resource.data.merchantId == adminData.merchantId;
      }
      function isCurrentKasirUpdatingStock() {
        // Kasir hanya boleh update field 'units' (untuk stock) dari produk merchantnya.
        return resource.data != null && resource.data.merchantId != null &&
               doesUserHaveRole(request.auth.uid, 'kasir') &&
               isUserBelongingToMerchant(request.auth.uid, resource.data.merchantId) &&
               request.resource.data.diff(resource.data).affectedKeys().hasOnly(['units', 'updatedAt']); // Izinkan juga updatedAt
      }

      allow read: if ((doesUserHaveRole(request.auth.uid, 'admin') || doesUserHaveRole(request.auth.uid, 'kasir')) && resource.data != null && isUserBelongingToMerchant(request.auth.uid, resource.data.merchantId)) || isUserLoggedInAsSuperadmin();
      allow create: if isCurrentAdminCreatingProductForOwnMerchant() || isUserLoggedInAsSuperadmin();
      allow update: if isProductBelongingToCurrentAdmin() || isCurrentKasirUpdatingStock() || isUserLoggedInAsSuperadmin();
      allow delete: if isProductBelongingToCurrentAdmin() || isUserLoggedInAsSuperadmin();
    }

    match /suppliers/{supplierId} {
      function isSupplierBelongingToCurrentAdmin() {
        return resource.data != null && resource.data.merchantId != null &&
               doesUserHaveRole(request.auth.uid, 'admin') &&
               isUserBelongingToMerchant(request.auth.uid, resource.data.merchantId);
      }
      function isCurrentAdminCreatingSupplierForOwnMerchant() {
        let adminData = getUserData(request.auth.uid);
        return adminData != null &&
               adminData.role == 'admin' &&
               adminData.merchantId != null &&
               request.resource.data.merchantId == adminData.merchantId;
      }

      allow read: if isSupplierBelongingToCurrentAdmin() || isUserLoggedInAsSuperadmin();
      allow create: if isCurrentAdminCreatingSupplierForOwnMerchant() || isUserLoggedInAsSuperadmin();
      allow update, delete: if isSupplierBelongingToCurrentAdmin() || isUserLoggedInAsSuperadmin();
    }

     match /settings/{settingsMerchantId} {
      function isSettingsForCurrentAdminMerchant() {
        // Hanya admin dari merchantId yang sama dengan settingsMerchantId yang boleh akses.
        let adminData = getUserData(request.auth.uid);
        return adminData != null &&
               adminData.role == 'admin' &&
               adminData.merchantId == settingsMerchantId;
      }
      allow read, write: if isSettingsForCurrentAdminMerchant() || isUserLoggedInAsSuperadmin();
    }

    match /transactions/{transactionId} {
      function isKasirOrAdminOfMerchantCreatingTransaction() {
        let userData = getUserData(request.auth.uid);
        return userData != null &&
               (userData.role == 'kasir' || userData.role == 'admin') &&
               userData.merchantId == request.resource.data.merchantId && // Transaksi untuk merchantnya sendiri
               (userData.role == 'admin' || (userData.outlets != null && request.resource.data.outletId in userData.outlets)); // Admin bisa untuk semua outletnya, kasir hanya untuk outlet yg diassign
      }

      allow create: if isKasirOrAdminOfMerchantCreatingTransaction() || isUserLoggedInAsSuperadmin();
      allow read: if ((doesUserHaveRole(request.auth.uid, 'admin') || doesUserHaveRole(request.auth.uid, 'kasir')) && resource.data != null && isUserBelongingToMerchant(request.auth.uid, resource.data.merchantId)) || isUserLoggedInAsSuperadmin();
    }
  }
}

    