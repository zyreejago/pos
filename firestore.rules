
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function userDocumentExists(uid) {
      return exists(/databases/$(database)/documents/users/$(uid));
    }

    // PERINGATAN: Panggil userDocumentExists(uid) sebelum menggunakan fungsi ini
    // untuk menghindari error jika dokumen tidak ada.
    function getUserDocumentDataUnsafe(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data;
    }
    
    // Helper untuk mendapatkan data dokumen dari koleksi apa pun dengan aman
    function getDocumentData(collectionName, docId) {
      let docPath = /databases/$(database)/documents/$(collectionName)/$(docId);
      return exists(docPath) ? get(docPath).data : null;
    }

    // --- Role Check Functions ---
    function isRequesterSuperadmin() {
      return isSignedIn() &&
             userDocumentExists(request.auth.uid) &&
             getUserDocumentDataUnsafe(request.auth.uid).role == 'superadmin';
    }

    // Memeriksa apakah PENGGUNA YANG SEDANG LOGIN adalah 'admin'.
    // Ini akan membaca dokumen /users/{request.auth.uid}.
    function isRequesterAdmin() {
      return isSignedIn() &&
             userDocumentExists(request.auth.uid) &&
             getUserDocumentDataUnsafe(request.auth.uid).role == 'admin';
    }
    
    // Mendapatkan merchantId dari requester jika dia admin dan dokumennya ada.
    // Harus dipanggil setelah isRequesterAdmin() atau pemeriksaan serupa.
    function getRequesterAdminMerchantIdUnsafe() {
      return getUserDocumentDataUnsafe(request.auth.uid).merchantId;
    }

    // --- Global Superadmin Rule ---
    // Superadmin dapat membaca dan menulis semua dokumen.
    match /{document=**} {
      allow read, write: if isRequesterSuperadmin();
    }

    // --- Collection Specific Rules ---
    match /users/{userId} {
      function isDocumentOwner() {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Untuk dokumen user YANG SUDAH ADA ({userId}),
      // periksa apakah requester adalah admin dari merchant user tersebut.
      function isRequesterAdminOfThisUserDocumentMerchant() {
        let targetUserDocData = getDocumentData('users', userId);
        return isRequesterAdmin() && // Requester adalah admin
               targetUserDocData != null && // Dokumen user target ada
               targetUserDocData.merchantId != null && // User target punya merchantId
               getRequesterAdminMerchantIdUnsafe() == targetUserDocData.merchantId; // merchantId mereka sama
      }
      
      // Untuk registrasi mandiri sebagai merchant admin (menunggu persetujuan)
      function isSelfRegisteringAsPendingMerchantAdmin() {
        return isSignedIn() &&
               request.auth.uid == userId && // Pengguna membuat dokumennya sendiri
               request.resource.data.role == 'admin' &&
               request.resource.data.status == 'pending_approval' &&
               request.resource.data.merchantId == request.auth.uid; // merchantId adalah UIDnya sendiri
      }

      allow read: if isDocumentOwner() || isRequesterAdminOfThisUserDocumentMerchant();

      // ATURAN MEMBUAT KASIR (Sangat Sederhana Sesuai Permintaan):
      // Jika requester adalah 'admin', dan dokumen baru adalah 'kasir'.
      // Klien HARUS tetap mengirimkan 'merchantId' untuk kasir baru.
      allow create: if (isRequesterAdmin() && request.resource.data.role == 'kasir' && request.resource.data.merchantId != null) ||
                       isSelfRegisteringAsPendingMerchantAdmin();
                       // Superadmin bisa membuat pengguna apa saja melalui aturan global.

      allow update: if isDocumentOwner() || isRequesterAdminOfThisUserDocumentMerchant();

      // Admin hanya bisa menghapus kasir dari merchant mereka.
      allow delete: if isRequesterAdminOfThisUserDocumentMerchant() && getDocumentData('users', userId).role == 'kasir';
    }

    match /outlets/{outletId} {
      function isOutletOfRequesterMerchant() {
        let outletDocData = getDocumentData('outlets', outletId);
        return isRequesterAdmin() &&
               outletDocData != null &&
               outletDocData.merchantId == getRequesterAdminMerchantIdUnsafe();
      }
      
      function isRequesterAdminCreatingOutletForOwnMerchant() {
        return isRequesterAdmin() &&
               request.resource.data.merchantId == getRequesterAdminMerchantIdUnsafe();
      }

      allow read: if isOutletOfRequesterMerchant();
      allow create: if isRequesterAdminCreatingOutletForOwnMerchant();
      allow update, delete: if isOutletOfRequesterMerchant();
    }

    match /products/{productId} {
      function isProductOfRequesterMerchant() {
        let productDocData = getDocumentData('products', productId);
        let requesterUserData = getUserDocumentDataUnsafe(request.auth.uid); // Bisa admin atau kasir
        return isSignedIn() &&
               userDocumentExists(request.auth.uid) &&
               (requesterUserData.role == 'admin' || requesterUserData.role == 'kasir') &&
               productDocData != null &&
               productDocData.merchantId == requesterUserData.merchantId;
      }
      
      function isRequesterAdminManagingProductForOwnMerchant() { // Renamed for clarity
        return isRequesterAdmin() &&
               request.resource.data.merchantId == getRequesterAdminMerchantIdUnsafe();
      }
      
      function isKasirUpdatingOwnMerchantProductStock() {
        let productDocData = getDocumentData('products', productId);
        let requesterKasirData = getUserDocumentDataUnsafe(request.auth.uid);
        return isSignedIn() &&
               userDocumentExists(request.auth.uid) && requesterKasirData.role == 'kasir' &&
               productDocData != null && productDocData.merchantId == requesterKasirData.merchantId &&
               request.resource.data.diff(resource.data).affectedKeys().hasOnly(['units', 'updatedAt']); // Hanya unit (stok) & updatedAt
      }

      allow read: if isProductOfRequesterMerchant();
      allow create: if isRequesterAdminManagingProductForOwnMerchant();
      // Admin bisa update semua field produk merchantnya, Kasir hanya bisa update stok (units).
      allow update: if (isRequesterAdmin() && getDocumentData('products', productId).merchantId == getRequesterAdminMerchantIdUnsafe()) || isKasirUpdatingOwnMerchantProductStock();
      allow delete: if isRequesterAdmin() && getDocumentData('products', productId).merchantId == getRequesterAdminMerchantIdUnsafe();
    }

    match /suppliers/{supplierId} {
       function isSupplierOfRequesterMerchant() {
        let supplierDocData = getDocumentData('suppliers', supplierId);
        return isRequesterAdmin() &&
               supplierDocData != null &&
               supplierDocData.merchantId == getRequesterAdminMerchantIdUnsafe();
      }
      function isRequesterAdminCreatingSupplierForOwnMerchant() {
        return isRequesterAdmin() &&
               request.resource.data.merchantId == getRequesterAdminMerchantIdUnsafe();
      }
      
      allow read: if isSupplierOfRequesterMerchant();
      allow create: if isRequesterAdminCreatingSupplierForOwnMerchant();
      allow update, delete: if isSupplierOfRequesterMerchant();
    }

    match /settings/{settingsMerchantId} {
      function isSettingsForRequesterMerchant() {
        return isRequesterAdmin() &&
               getRequesterAdminMerchantIdUnsafe() == settingsMerchantId;
      }
      allow read, write: if isSettingsForRequesterMerchant();
    }

    match /transactions/{transactionId} {
      function canUserCreateTransaction() {
        let requesterUserData = getUserDocumentDataUnsafe(request.auth.uid);
        let isAllowedRole = requesterUserData.role == 'admin' || requesterUserData.role == 'kasir';
        let isOutletAllowedForKasir = requesterUserData.role == 'kasir' && 
                                      requesterUserData.outlets != null && 
                                      request.resource.data.outletId in requesterUserData.outlets;
        // Admin bisa membuat transaksi untuk outlet manapun di merchantnya.
        // Kasir hanya bisa untuk outlet yang terdaftar padanya.
        let canAccessOutlet = requesterUserData.role == 'admin' || isOutletAllowedForKasir;
                              
        return isSignedIn() &&
               userDocumentExists(request.auth.uid) &&
               isAllowedRole &&
               request.resource.data.merchantId == requesterUserData.merchantId && 
               canAccessOutlet;
      }
      
      function canUserReadTransaction() {
         let targetTransactionData = getDocumentData('transactions', transactionId);
         let requesterUserData = getUserDocumentDataUnsafe(request.auth.uid);
         return isSignedIn() &&
                userDocumentExists(request.auth.uid) &&
                (requesterUserData.role == 'admin' || requesterUserData.role == 'kasir') &&
                targetTransactionData != null &&
                targetTransactionData.merchantId == requesterUserData.merchantId;
      }

      allow create: if canUserCreateTransaction();
      allow read: if canUserReadTransaction();
    }
  }
}

    